diff --git a/node_modules/@angular/animations/esm2020/browser/src/dsl/animation_ast_builder.mjs b/node_modules/@angular/animations/esm2020/browser/src/dsl/animation_ast_builder.mjs
index 49bab4f..4c2dbde 100755
--- a/node_modules/@angular/animations/esm2020/browser/src/dsl/animation_ast_builder.mjs
+++ b/node_modules/@angular/animations/esm2020/browser/src/dsl/animation_ast_builder.mjs
@@ -407,7 +407,7 @@ export class AnimationAstBuilderVisitor {
         }
         const timings = metadata.timings === 'full' ?
             { duration: 0, delay: 0, easing: 'full' } :
-            resolveTiming(metadata.timings, context.errors, true);
+            constructTimingAst(metadata.timings, context.errors, true);
         return {
             type: 12 /* AnimationMetadataType.Stagger */,
             animation: visitDslNode(this, normalizeAnimationEntry(metadata.animation), context),
diff --git a/node_modules/@angular/animations/esm2020/browser/src/dsl/animation_timeline_builder.mjs b/node_modules/@angular/animations/esm2020/browser/src/dsl/animation_timeline_builder.mjs
index 46964cb..bb27bac 100755
--- a/node_modules/@angular/animations/esm2020/browser/src/dsl/animation_timeline_builder.mjs
+++ b/node_modules/@angular/animations/esm2020/browser/src/dsl/animation_timeline_builder.mjs
@@ -241,11 +241,11 @@ export class AnimationTimelineBuilderVisitor {
         context.transformIntoNewTimeline(furthestTime);
         context.previousNode = ast;
     }
-    _visitTiming(ast, context) {
+    _visitTiming(ast, context, allowNegativeValues = false) {
         if (ast.dynamic) {
             const strValue = ast.strValue;
             const timingValue = context.params ? interpolateParams(strValue, context.params, context.errors) : strValue;
-            return resolveTiming(timingValue, context.errors);
+            return resolveTiming(timingValue, context.errors, allowNegativeValues);
         }
         else {
             return { duration: ast.duration, delay: ast.delay, easing: ast.easing };
@@ -353,7 +353,7 @@ export class AnimationTimelineBuilderVisitor {
     visitStagger(ast, context) {
         const parentContext = context.parentContext;
         const tl = context.currentTimeline;
-        const timings = ast.timings;
+        const timings = this._visitTiming(ast.timings, context, true);
         const duration = Math.abs(timings.duration);
         const maxTime = duration * (context.currentQueryTotal - 1);
         let delay = duration * context.currentQueryIndex;
diff --git a/node_modules/@angular/animations/fesm2015/browser.mjs b/node_modules/@angular/animations/fesm2015/browser.mjs
index 451877f..f0db038 100755
--- a/node_modules/@angular/animations/fesm2015/browser.mjs
+++ b/node_modules/@angular/animations/fesm2015/browser.mjs
@@ -1346,7 +1346,7 @@ class AnimationAstBuilderVisitor {
         }
         const timings = metadata.timings === 'full' ?
             { duration: 0, delay: 0, easing: 'full' } :
-            resolveTiming(metadata.timings, context.errors, true);
+            constructTimingAst(metadata.timings, context.errors, true);
         return {
             type: 12 /* AnimationMetadataType.Stagger */,
             animation: visitDslNode(this, normalizeAnimationEntry(metadata.animation), context),
@@ -1709,11 +1709,11 @@ class AnimationTimelineBuilderVisitor {
         context.transformIntoNewTimeline(furthestTime);
         context.previousNode = ast;
     }
-    _visitTiming(ast, context) {
+    _visitTiming(ast, context, allowNegativeValues = false) {
         if (ast.dynamic) {
             const strValue = ast.strValue;
             const timingValue = context.params ? interpolateParams(strValue, context.params, context.errors) : strValue;
-            return resolveTiming(timingValue, context.errors);
+            return resolveTiming(timingValue, context.errors, allowNegativeValues);
         }
         else {
             return { duration: ast.duration, delay: ast.delay, easing: ast.easing };
@@ -1821,7 +1821,7 @@ class AnimationTimelineBuilderVisitor {
     visitStagger(ast, context) {
         const parentContext = context.parentContext;
         const tl = context.currentTimeline;
-        const timings = ast.timings;
+        const timings = this._visitTiming(ast.timings, context, true);
         const duration = Math.abs(timings.duration);
         const maxTime = duration * (context.currentQueryTotal - 1);
         let delay = duration * context.currentQueryIndex;
diff --git a/node_modules/@angular/animations/fesm2020/browser.mjs b/node_modules/@angular/animations/fesm2020/browser.mjs
index 53bdcc5..ddbb2c7 100755
--- a/node_modules/@angular/animations/fesm2020/browser.mjs
+++ b/node_modules/@angular/animations/fesm2020/browser.mjs
@@ -1346,7 +1346,7 @@ class AnimationAstBuilderVisitor {
         }
         const timings = metadata.timings === 'full' ?
             { duration: 0, delay: 0, easing: 'full' } :
-            resolveTiming(metadata.timings, context.errors, true);
+            constructTimingAst(metadata.timings, context.errors, true);
         return {
             type: 12 /* AnimationMetadataType.Stagger */,
             animation: visitDslNode(this, normalizeAnimationEntry(metadata.animation), context),
@@ -1708,11 +1708,11 @@ class AnimationTimelineBuilderVisitor {
         context.transformIntoNewTimeline(furthestTime);
         context.previousNode = ast;
     }
-    _visitTiming(ast, context) {
+    _visitTiming(ast, context, allowNegativeValues = false) {
         if (ast.dynamic) {
             const strValue = ast.strValue;
             const timingValue = context.params ? interpolateParams(strValue, context.params, context.errors) : strValue;
-            return resolveTiming(timingValue, context.errors);
+            return resolveTiming(timingValue, context.errors, allowNegativeValues);
         }
         else {
             return { duration: ast.duration, delay: ast.delay, easing: ast.easing };
@@ -1820,7 +1820,7 @@ class AnimationTimelineBuilderVisitor {
     visitStagger(ast, context) {
         const parentContext = context.parentContext;
         const tl = context.currentTimeline;
-        const timings = ast.timings;
+        const timings = this._visitTiming(ast.timings, context, true);
         const duration = Math.abs(timings.duration);
         const maxTime = duration * (context.currentQueryTotal - 1);
         let delay = duration * context.currentQueryIndex;
